/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CitiesService } from "../cities.service";
import { CitiesCreateInput } from "./CitiesCreateInput";
import { Cities } from "./Cities";
import { CitiesFindManyArgs } from "./CitiesFindManyArgs";
import { CitiesWhereUniqueInput } from "./CitiesWhereUniqueInput";
import { CitiesUpdateInput } from "./CitiesUpdateInput";

export class CitiesControllerBase {
  constructor(protected readonly service: CitiesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Cities })
  async createCities(@common.Body() data: CitiesCreateInput): Promise<Cities> {
    return await this.service.createCities({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Cities] })
  @ApiNestedQuery(CitiesFindManyArgs)
  async citiesItems(@common.Req() request: Request): Promise<Cities[]> {
    const args = plainToClass(CitiesFindManyArgs, request.query);
    return this.service.citiesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Cities })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cities(
    @common.Param() params: CitiesWhereUniqueInput
  ): Promise<Cities | null> {
    const result = await this.service.cities({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Cities })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCities(
    @common.Param() params: CitiesWhereUniqueInput,
    @common.Body() data: CitiesUpdateInput
  ): Promise<Cities | null> {
    try {
      return await this.service.updateCities({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Cities })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCities(
    @common.Param() params: CitiesWhereUniqueInput
  ): Promise<Cities | null> {
    try {
      return await this.service.deleteCities({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
