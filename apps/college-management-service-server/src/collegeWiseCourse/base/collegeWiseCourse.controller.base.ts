/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CollegeWiseCourseService } from "../collegeWiseCourse.service";
import { CollegeWiseCourseCreateInput } from "./CollegeWiseCourseCreateInput";
import { CollegeWiseCourse } from "./CollegeWiseCourse";
import { CollegeWiseCourseFindManyArgs } from "./CollegeWiseCourseFindManyArgs";
import { CollegeWiseCourseWhereUniqueInput } from "./CollegeWiseCourseWhereUniqueInput";
import { CollegeWiseCourseUpdateInput } from "./CollegeWiseCourseUpdateInput";

export class CollegeWiseCourseControllerBase {
  constructor(protected readonly service: CollegeWiseCourseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CollegeWiseCourse })
  async createCollegeWiseCourse(
    @common.Body() data: CollegeWiseCourseCreateInput
  ): Promise<CollegeWiseCourse> {
    return await this.service.createCollegeWiseCourse({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CollegeWiseCourse] })
  @ApiNestedQuery(CollegeWiseCourseFindManyArgs)
  async collegeWiseCourses(
    @common.Req() request: Request
  ): Promise<CollegeWiseCourse[]> {
    const args = plainToClass(CollegeWiseCourseFindManyArgs, request.query);
    return this.service.collegeWiseCourses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CollegeWiseCourse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async collegeWiseCourse(
    @common.Param() params: CollegeWiseCourseWhereUniqueInput
  ): Promise<CollegeWiseCourse | null> {
    const result = await this.service.collegeWiseCourse({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CollegeWiseCourse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCollegeWiseCourse(
    @common.Param() params: CollegeWiseCourseWhereUniqueInput,
    @common.Body() data: CollegeWiseCourseUpdateInput
  ): Promise<CollegeWiseCourse | null> {
    try {
      return await this.service.updateCollegeWiseCourse({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CollegeWiseCourse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCollegeWiseCourse(
    @common.Param() params: CollegeWiseCourseWhereUniqueInput
  ): Promise<CollegeWiseCourse | null> {
    try {
      return await this.service.deleteCollegeWiseCourse({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
