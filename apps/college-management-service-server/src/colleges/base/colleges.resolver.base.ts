/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Colleges } from "./Colleges";
import { CollegesCountArgs } from "./CollegesCountArgs";
import { CollegesFindManyArgs } from "./CollegesFindManyArgs";
import { CollegesFindUniqueArgs } from "./CollegesFindUniqueArgs";
import { DeleteCollegesArgs } from "./DeleteCollegesArgs";
import { CollegesService } from "../colleges.service";
@graphql.Resolver(() => Colleges)
export class CollegesResolverBase {
  constructor(protected readonly service: CollegesService) {}

  async _collegesItemsMeta(
    @graphql.Args() args: CollegesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Colleges])
  async collegesItems(
    @graphql.Args() args: CollegesFindManyArgs
  ): Promise<Colleges[]> {
    return this.service.collegesItems(args);
  }

  @graphql.Query(() => Colleges, { nullable: true })
  async colleges(
    @graphql.Args() args: CollegesFindUniqueArgs
  ): Promise<Colleges | null> {
    const result = await this.service.colleges(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Colleges)
  async deleteColleges(
    @graphql.Args() args: DeleteCollegesArgs
  ): Promise<Colleges | null> {
    try {
      return await this.service.deleteColleges(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
