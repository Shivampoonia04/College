/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { States } from "./States";
import { StatesCountArgs } from "./StatesCountArgs";
import { StatesFindManyArgs } from "./StatesFindManyArgs";
import { StatesFindUniqueArgs } from "./StatesFindUniqueArgs";
import { DeleteStatesArgs } from "./DeleteStatesArgs";
import { StatesService } from "../states.service";
@graphql.Resolver(() => States)
export class StatesResolverBase {
  constructor(protected readonly service: StatesService) {}

  async _statesItemsMeta(
    @graphql.Args() args: StatesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [States])
  async statesItems(
    @graphql.Args() args: StatesFindManyArgs
  ): Promise<States[]> {
    return this.service.statesItems(args);
  }

  @graphql.Query(() => States, { nullable: true })
  async states(
    @graphql.Args() args: StatesFindUniqueArgs
  ): Promise<States | null> {
    const result = await this.service.states(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => States)
  async deleteStates(
    @graphql.Args() args: DeleteStatesArgs
  ): Promise<States | null> {
    try {
      return await this.service.deleteStates(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
