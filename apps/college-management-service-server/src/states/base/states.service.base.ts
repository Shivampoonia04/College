/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, States as PrismaStates } from "@prisma/client";

export class StatesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StatesCountArgs, "select">): Promise<number> {
    return this.prisma.states.count(args);
  }

  async statesItems(args: Prisma.StatesFindManyArgs): Promise<PrismaStates[]> {
    return this.prisma.states.findMany(args);
  }
  async states(
    args: Prisma.StatesFindUniqueArgs
  ): Promise<PrismaStates | null> {
    return this.prisma.states.findUnique(args);
  }
  async createStates(args: Prisma.StatesCreateArgs): Promise<PrismaStates> {
    return this.prisma.states.create(args);
  }
  async updateStates(args: Prisma.StatesUpdateArgs): Promise<PrismaStates> {
    return this.prisma.states.update(args);
  }
  async deleteStates(args: Prisma.StatesDeleteArgs): Promise<PrismaStates> {
    return this.prisma.states.delete(args);
  }
}
