/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StatesService } from "../states.service";
import { StatesCreateInput } from "./StatesCreateInput";
import { States } from "./States";
import { StatesFindManyArgs } from "./StatesFindManyArgs";
import { StatesWhereUniqueInput } from "./StatesWhereUniqueInput";
import { StatesUpdateInput } from "./StatesUpdateInput";

export class StatesControllerBase {
  constructor(protected readonly service: StatesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: States })
  async createStates(@common.Body() data: StatesCreateInput): Promise<States> {
    return await this.service.createStates({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [States] })
  @ApiNestedQuery(StatesFindManyArgs)
  async statesItems(@common.Req() request: Request): Promise<States[]> {
    const args = plainToClass(StatesFindManyArgs, request.query);
    return this.service.statesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: States })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async states(
    @common.Param() params: StatesWhereUniqueInput
  ): Promise<States | null> {
    const result = await this.service.states({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: States })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStates(
    @common.Param() params: StatesWhereUniqueInput,
    @common.Body() data: StatesUpdateInput
  ): Promise<States | null> {
    try {
      return await this.service.updateStates({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: States })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStates(
    @common.Param() params: StatesWhereUniqueInput
  ): Promise<States | null> {
    try {
      return await this.service.deleteStates({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
