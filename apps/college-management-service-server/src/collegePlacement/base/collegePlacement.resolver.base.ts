/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CollegePlacement } from "./CollegePlacement";
import { CollegePlacementCountArgs } from "./CollegePlacementCountArgs";
import { CollegePlacementFindManyArgs } from "./CollegePlacementFindManyArgs";
import { CollegePlacementFindUniqueArgs } from "./CollegePlacementFindUniqueArgs";
import { DeleteCollegePlacementArgs } from "./DeleteCollegePlacementArgs";
import { CollegePlacementService } from "../collegePlacement.service";
@graphql.Resolver(() => CollegePlacement)
export class CollegePlacementResolverBase {
  constructor(protected readonly service: CollegePlacementService) {}

  async _collegePlacementsMeta(
    @graphql.Args() args: CollegePlacementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CollegePlacement])
  async collegePlacements(
    @graphql.Args() args: CollegePlacementFindManyArgs
  ): Promise<CollegePlacement[]> {
    return this.service.collegePlacements(args);
  }

  @graphql.Query(() => CollegePlacement, { nullable: true })
  async collegePlacement(
    @graphql.Args() args: CollegePlacementFindUniqueArgs
  ): Promise<CollegePlacement | null> {
    const result = await this.service.collegePlacement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CollegePlacement)
  async deleteCollegePlacement(
    @graphql.Args() args: DeleteCollegePlacementArgs
  ): Promise<CollegePlacement | null> {
    try {
      return await this.service.deleteCollegePlacement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
