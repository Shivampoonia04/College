/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CollegePlacementService } from "../collegePlacement.service";
import { CollegePlacementCreateInput } from "./CollegePlacementCreateInput";
import { CollegePlacement } from "./CollegePlacement";
import { CollegePlacementFindManyArgs } from "./CollegePlacementFindManyArgs";
import { CollegePlacementWhereUniqueInput } from "./CollegePlacementWhereUniqueInput";
import { CollegePlacementUpdateInput } from "./CollegePlacementUpdateInput";

export class CollegePlacementControllerBase {
  constructor(protected readonly service: CollegePlacementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CollegePlacement })
  async createCollegePlacement(
    @common.Body() data: CollegePlacementCreateInput
  ): Promise<CollegePlacement> {
    return await this.service.createCollegePlacement({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CollegePlacement] })
  @ApiNestedQuery(CollegePlacementFindManyArgs)
  async collegePlacements(
    @common.Req() request: Request
  ): Promise<CollegePlacement[]> {
    const args = plainToClass(CollegePlacementFindManyArgs, request.query);
    return this.service.collegePlacements({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CollegePlacement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async collegePlacement(
    @common.Param() params: CollegePlacementWhereUniqueInput
  ): Promise<CollegePlacement | null> {
    const result = await this.service.collegePlacement({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CollegePlacement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCollegePlacement(
    @common.Param() params: CollegePlacementWhereUniqueInput,
    @common.Body() data: CollegePlacementUpdateInput
  ): Promise<CollegePlacement | null> {
    try {
      return await this.service.updateCollegePlacement({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CollegePlacement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCollegePlacement(
    @common.Param() params: CollegePlacementWhereUniqueInput
  ): Promise<CollegePlacement | null> {
    try {
      return await this.service.deleteCollegePlacement({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
